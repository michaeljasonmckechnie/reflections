How did viewing a diff between two versions of a file help you see the bug that
 was introduced?

It showed where all the changes were. So if it the old file worked and the new
one didn't, then it will show typos, and where lines have been changed. This h
elps to pinpoint where a problem could exist.

How could having easy access to the entire history of a file make you a more e
fficient programmer in the long term?

It makes you more efficient by enabling you to find changes that have broken y
our code.

What do you think are the pros and cons of manually choosing when to create a 
commit, like you do in Git, vs having versions automatically saved, like Googl
e docs does?

Pros: You're in control, so you can decide when it's best to do.
Cons: Same as above. Except that some commits may become to big.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separate
 ly?

Programming projects could have things broken-up into modules, and edits on som
e of these could potentially affect other parts/modules. So, it is important to
have a snapshot of each change made across multiple files.

How can you use the commands git log and git diff to view the history of files?

You can use git log to view the messages about how the files were changed. You
can use get diff to see the differences between file committs.

How might using version control make you more confident to make changes that co
uld break something?

Knowing that you can always go back to the previous version will save you time 
and work, so you are more free to experiment with the code.

Now that you have your workspace set up, what do you want to try using Git for?

I think I would like to use git for when I start working through my python book
. Seems like it could be a good use of git and github.